#
# release - バージョニング, GitHubおよびPyPIへのリリース
#
name: release

# 実行条件:
#  - versioningワークフロー完了 @release
on:
  pull_request:
    branches: [release]
    types: [closed]
    paths:
      - "src/**"
      - "**.cfg"

jobs:
  # バージョニングが必要かチェック
  check_should_versioning:
    runs-on: ubuntu-latest
    if: github.event.pull_request.merged == true

    outputs:
      needs_update: ${{ steps.pass_result.outputs.needs_update }}
      next_version_candidate: ${{ steps.pass_result.outputs.next_version_candidate }}

    steps:
      - uses: actions/checkout@v3
        with:
          ref: "release" # リリースブランチをチェックアウトする

      # 最新バージョンの取得
      - name: get latest release version
        run: |
          git fetch --all --tags
          . ./ci_scripts/functions.sh
          CURRENT_VERSION=`searchLatestVersion | sed 's/^v//'`
          echo "Latest version: v${CURRENT_VERSION}"
          echo "CURRENT_VERSION=${CURRENT_VERSION}" >> $GITHUB_ENV

      # 次期バージョンの計算
      - name: calculate next version
        run: |
          NEXT_VERSION_CANDIDATE=`bash ./ci_scripts/vercalc.sh | tail -n 1`
          echo "Next release candidate: ${NEXT_VERSION_CANDIDATE}"
          echo "NEXT_VERSION_CANDIDATE=${NEXT_VERSION_CANDIDATE}" >> $GITHUB_ENV

      # 比較+バージョニングの必要があるか判定
      - name: compare current and next version
        run: |
          . ./ci_scripts/functions.sh
          isNewVersion "${{ env.CURRENT_VERSION }}" "${{ env.NEXT_VERSION_CANDIDATE }}"; result=$?
          case $result in
          "${IS_NEW_VERSION}")
              log "The candidate of next version \033[35;1m${{ env.NEXT_VERSION_CANDIDATE }}\033[0m is valid as next version.";;
          "${IS_PREVIOUS_VERSION}")
              log "\033[33;1mWARNING\033[0m The candidate of next version \033[35;1m${{ env.NEXT_VERSION_CANDIDATE }}\033[0m is older than the current version. This version specification will be ignored.";;
          "${IS_SAME_VERSION}")
              log "\033[33;1mWARNING\033[0m The candidate of next version \033[35;1m${{ env.NEXT_VERSION_CANDIDATE }}\033[0m is same version with current one. This version specification will be ignored.";;
          *)
              log "\033[33;1mWARNING\033[0m Validation failed: \033[35;1m${{ env.NEXT_VERSION_CANDIDATE }}\033[0m This version specification will be ignored.";;
          esac
          if [ $result -eq $IS_NEW_VERSION ]; then
            echo "NEEDS_UPDATE=1" >> $GITHUB_ENV
          else
            echo "NEEDS_UPDATE=0" >> $GITHUB_ENV
          fi

      # 結果を次のジョブに渡す
      - name: path result to next job as output
        id: pass_result
        run: |
          echo "::set-output name=needs_update::${{ env.NEEDS_UPDATE }}"
          echo "::set-output name=next_version_candidate::${{ env.NEXT_VERSION_CANDIDATE }}"

  # バージョニング
  versioning:
    runs-on: ubuntu-latest
    needs: check_should_versioning

    if: needs.check_should_versioning.outputs.needs_update == 1

    steps:
      # リリースブランチをチェックアウト
      - uses: actions/checkout@v3
        with:
          ref: "release"

      # バージョニングを行い
      - name: versioning
        run: bash ./ci_scripts/versioning.sh "${{ needs.check_should_versioning.outputs.next_version_candidate }}"

      # Gitをセットアップして
      - name: Git setup
        run: |
          set -x
          git config user.name github-actions[bot]
          git config user.email 41898282+github-actions[bot]@users.noreply.github.com

      # 結果をcommitし、タグを打ってリリースブランチにpush
      - name: Commit and push versioning
        run: |
          git add --all
          git diff --quiet && git diff --staged --quiet || git commit -m "[Release] v${{ needs.check_should_versioning.outputs.next_version_candidate }}"
          git push origin release

  # GitHubリリース発行
  release_to_github:
    runs-on: ubuntu-latest
    needs:
      - check_should_versioning
      - versioning

    steps:
      - name: Notify next release
        run: echo "Next release will be v${{ needs.check_should_versioning.outputs.next_version_candidate }}."

      - name: Publish release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

        with:
          tag_name: v${{ needs.check_should_versioning.outputs.next_version_candidate }}
          draft: false
          prerelease: false
          generate_release_notes: true

  # PyPIリリース発行
  release_to_pypi:
    runs-on: ubuntu-latest
    needs: versioning

    steps:
      # リリースブランチをチェックアウト
      - uses: actions/checkout@v3
        with:
          ref: "release"

      # Pythonセットアップ
      - uses: actions/setup-python@v2
        with:
          python-version: 3.9

      # ライブラリのビルド
      - name: Install pypa/build
        run: python -m pip install build --user

      # アップロード準備
      - name: Build a binary wheel and a source tarball
        run: python -m build --sdist --wheel --outdir dist/

      # PyPIへアップロード
      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{ secrets.PYPI_API_TOKEN }}
